#!/usr/bin/env bash

set -u
set -e

. @CMAKE_CURRENT_BINARY_DIR@/../test_util.sh
HOSTFILE=/dev/null
NUM_RUNS=1
NUM_DIMS=(2 3)
TEST_NAME=test_tensor_mpi_shuffle
BUILD_DIR=@CMAKE_CURRENT_BINARY_DIR@
##############
PARAMS=("2 2 1 1 7 7 64 1"
		"4 1 1 1 4 2 64 1"
		"1 4 1 2 32 32 16 8"
		"1 4 1 2 4 4 1 1"
		"2 2 1 2 15 15 32 2"
		"2 2 1 1 13 5 128 32"
		"2 4 1 1 16 16 4 8")
if [[ $TEST_NAME == test_tensor_mpi_shuffle ]]; then
    METHODS=(MPI)
elif [[ $TEST_NAME == test_tensor_mpi_shuffle_cuda ]]; then
    METHODS=(MPI P2P AL HYBRID)
else
    METHODS=()
fi
##############
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
LOG=$TEST_NAME.$TIMESTAMP.log
##############
# utils
function calc_np() {
	num_dims=$1
	shift
	local np=1
	local shape_dim=$(expr $num_dims + 2)
	for i in $(seq $shape_dim); do
		np=$((np * $1))
		shift
	done
	echo $np
}
function shape_2to3() {
	num_dims=$1
	shift
	if [[ $num_dims = 2 ]]; then
		echo $@
	elif [[ $num_dims = 3 ]]; then
		w=$1
		hcn="$2 $3 $4"
		pw=$5
		phcn="$6 $7 $8"
		echo $w $w $hcn $pw $pw $phcn # Extend HxW to HxWxW.
	else
		echo "Invalid number of spatial dimentions: $NUM_DIMS" >&2
		exit
	fi
}
##############

OPTS=`getopt -o h --long host-file:,num-runs:,method:,num-dims:,cuda -- "$@"`
if [ $? != 0 ]; then echo Failed parsing options. >&2; exit 1; fi
eval set -- $OPTS
while true; do
	case $1 in
		--host-file)
			HOSTFILE=$2
			shift 2
			;;
		--num-runs)
			NUM_RUNS=$2
			shift 2
			;;
		--method)
			METHODS=($2)
			shift 2
			;;
		--num-dims)
			NUM_DIMS=($2)
			shift 2
			;;
        --cuda)
            TEST_NAME=${TEST_NAME}_cuda
            ;;
		--)
			shift; break
			;;
		*)
			echo "Invalid option" >&2
			exit 1
			;;
	esac
done

for num_dims in "${NUM_DIMS[@]}"; do
	echo "Testing num_dims=$num_dims"
	for i in $(seq $NUM_RUNS); do
		for method in "${METHODS[@]}"; do
			echo "Testing $method"
			for param in "${PARAMS[@]}"; do
				param=`shape_2to3 $num_dims $param`
				echo "Test parameters: $param"
				np=$(calc_np $num_dims $param)
				echo "Testing $BUILD_DIR/$TEST_NAME $num_dims $param $method" 2>&1 |tee -a $LOG
				set +e
				mpi_run $np $HOSTFILE $BUILD_DIR/$TEST_NAME $num_dims $param $method >> $LOG 2>&1
				if [ $? -ne  0 ]; then
					echo "Test failed"
					exit 1
				fi
				set -e
			done
		done
	done
done

echo "Completed successfully"
